// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: blog_storage_svr.proto

package blog_storage_svr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlogStorageSvr_SelectCategoryList_FullMethodName = "/blog_storage_svr.blog_storage_svr/SelectCategoryList"
	BlogStorageSvr_GetCategory_FullMethodName        = "/blog_storage_svr.blog_storage_svr/GetCategory"
	BlogStorageSvr_UpdateCategory_FullMethodName     = "/blog_storage_svr.blog_storage_svr/UpdateCategory"
	BlogStorageSvr_CreateCategory_FullMethodName     = "/blog_storage_svr.blog_storage_svr/CreateCategory"
)

// BlogStorageSvrClient is the client API for BlogStorageSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogStorageSvrClient interface {
	SelectCategoryList(ctx context.Context, in *SelectCategoryListReq, opts ...grpc.CallOption) (*SelectCategoryListRsp, error)
	GetCategory(ctx context.Context, in *GetCategoryReq, opts ...grpc.CallOption) (*GetCategoryRsp, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...grpc.CallOption) (*UpdateCategoryRsp, error)
	CreateCategory(ctx context.Context, in *CreateCategoryReq, opts ...grpc.CallOption) (*CreateCategoryRsp, error)
}

type blogStorageSvrClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogStorageSvrClient(cc grpc.ClientConnInterface) BlogStorageSvrClient {
	return &blogStorageSvrClient{cc}
}

func (c *blogStorageSvrClient) SelectCategoryList(ctx context.Context, in *SelectCategoryListReq, opts ...grpc.CallOption) (*SelectCategoryListRsp, error) {
	out := new(SelectCategoryListRsp)
	err := c.cc.Invoke(ctx, BlogStorageSvr_SelectCategoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogStorageSvrClient) GetCategory(ctx context.Context, in *GetCategoryReq, opts ...grpc.CallOption) (*GetCategoryRsp, error) {
	out := new(GetCategoryRsp)
	err := c.cc.Invoke(ctx, BlogStorageSvr_GetCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogStorageSvrClient) UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...grpc.CallOption) (*UpdateCategoryRsp, error) {
	out := new(UpdateCategoryRsp)
	err := c.cc.Invoke(ctx, BlogStorageSvr_UpdateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogStorageSvrClient) CreateCategory(ctx context.Context, in *CreateCategoryReq, opts ...grpc.CallOption) (*CreateCategoryRsp, error) {
	out := new(CreateCategoryRsp)
	err := c.cc.Invoke(ctx, BlogStorageSvr_CreateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogStorageSvrServer is the server API for BlogStorageSvr service.
// All implementations should embed UnimplementedBlogStorageSvrServer
// for forward compatibility
type BlogStorageSvrServer interface {
	SelectCategoryList(context.Context, *SelectCategoryListReq) (*SelectCategoryListRsp, error)
	GetCategory(context.Context, *GetCategoryReq) (*GetCategoryRsp, error)
	UpdateCategory(context.Context, *UpdateCategoryReq) (*UpdateCategoryRsp, error)
	CreateCategory(context.Context, *CreateCategoryReq) (*CreateCategoryRsp, error)
}

// UnimplementedBlogStorageSvrServer should be embedded to have forward compatible implementations.
type UnimplementedBlogStorageSvrServer struct {
}

func (UnimplementedBlogStorageSvrServer) SelectCategoryList(context.Context, *SelectCategoryListReq) (*SelectCategoryListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectCategoryList not implemented")
}
func (UnimplementedBlogStorageSvrServer) GetCategory(context.Context, *GetCategoryReq) (*GetCategoryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedBlogStorageSvrServer) UpdateCategory(context.Context, *UpdateCategoryReq) (*UpdateCategoryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedBlogStorageSvrServer) CreateCategory(context.Context, *CreateCategoryReq) (*CreateCategoryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}

// UnsafeBlogStorageSvrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogStorageSvrServer will
// result in compilation errors.
type UnsafeBlogStorageSvrServer interface {
	mustEmbedUnimplementedBlogStorageSvrServer()
}

func RegisterBlogStorageSvrServer(s grpc.ServiceRegistrar, srv BlogStorageSvrServer) {
	s.RegisterService(&BlogStorageSvr_ServiceDesc, srv)
}

func _BlogStorageSvr_SelectCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectCategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStorageSvrServer).SelectCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogStorageSvr_SelectCategoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStorageSvrServer).SelectCategoryList(ctx, req.(*SelectCategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogStorageSvr_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStorageSvrServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogStorageSvr_GetCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStorageSvrServer).GetCategory(ctx, req.(*GetCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogStorageSvr_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStorageSvrServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogStorageSvr_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStorageSvrServer).UpdateCategory(ctx, req.(*UpdateCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogStorageSvr_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogStorageSvrServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogStorageSvr_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogStorageSvrServer).CreateCategory(ctx, req.(*CreateCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogStorageSvr_ServiceDesc is the grpc.ServiceDesc for BlogStorageSvr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogStorageSvr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog_storage_svr.blog_storage_svr",
	HandlerType: (*BlogStorageSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectCategoryList",
			Handler:    _BlogStorageSvr_SelectCategoryList_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _BlogStorageSvr_GetCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _BlogStorageSvr_UpdateCategory_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _BlogStorageSvr_CreateCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog_storage_svr.proto",
}
